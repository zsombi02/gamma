/********************************************************************************
 * Copyright (c) 2018 Contributors to the Gamma project
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * SPDX-License-Identifier: EPL-1.0
 ********************************************************************************/
package hu.bme.mit.gamma.codegeneration.^java.queries

import "http://www.mit.bme.hu/gamma/expression/Model" as con
import "http://www.mit.bme.hu/gamma/statechart/Model/Statechart" as model
import "http://www.mit.bme.hu/gamma/statechart/Model/Composite"
import "http://www.mit.bme.hu/gamma/statechart/Model/Interface" as gif

//import "http://www.mit.bme.hu/gamma/yakindu/transformation/Traceability"
//
//import "http://www.yakindu.org/sct/sgraph/2.0.0"
//import "http://www.yakindu.org/sct/statechart/SText" as stext
//import "http://www.yakindu.org/base/base/2.0.0"
//import "http://www.yakindu.org/base/types/2.0.0" as types

//pattern traces(trace : Trace, from, to) {
//	Trace.from(trace, from);
//	Trace.to(trace, to);
//}

// Type declarations

pattern typeDeclarations(typeDeclaration : TypeDeclaration) {
	TypeDeclaration(typeDeclaration);
}

// Composition

pattern simpleGammaComponents(statechartDefinition : StatechartDefinition) {
	StatechartDefinition(statechartDefinition);
}

//pattern simpleYakinduComponents(statechartDefinition : Component) {
//	Statechart(yakinduStatechart);
//	find traces(_, yakinduStatechart, statechartDefinition);
//	find simpleGammaComponents(statechartDefinition);
//}

pattern abstractSynchronousCompositeComponents(synchronousCompositeComponent : AbstractSynchronousCompositeComponent) {
	AbstractSynchronousCompositeComponent(synchronousCompositeComponent);
}

pattern simpleChannels(composite : CompositeComponent, simpleChannel : SimpleChannel, providedPort : InstancePortReference, requiredPort : InstancePortReference) {
	CompositeComponent.channels(composite, simpleChannel);
	SimpleChannel.providedPort(simpleChannel, providedPort);
	SimpleChannel.requiredPort(simpleChannel, requiredPort);
}

pattern broadcastChannels(composite : CompositeComponent, broadcastChannel : BroadcastChannel, providedPort : InstancePortReference, requiredPort : InstancePortReference) {
	CompositeComponent.channels(composite, broadcastChannel);
	BroadcastChannel.providedPort(broadcastChannel, providedPort);
	BroadcastChannel.requiredPorts(broadcastChannel, requiredPort);
}

//private pattern mappedPorts(interface : Interface, gPort : Port, yEvent : types::Event, gEvent : gif::Event) {
//	find traces(_, yEvent, gEvent); 
//	find traces(_, ySct, gSct);
//	find traces(_, yIf, gPort);
//	Component.ports(gSct, gPort);
//	Port.interfaceRealization.interface(gPort, interface);
//	Statechart.scopes(ySct, yIf);
//	InterfaceScope.members(yIf, yEvent);
//}

private pattern portBindings(composite : CompositeComponent, systemPort : Port, instance : ComponentInstance, instancePort : Port) {
	CompositeComponent.portBindings(composite, portBinding);
	PortBinding.compositeSystemPort(portBinding, systemPort);
	PortBinding.instancePortReference(portBinding, instancePortRef);
	InstancePortReference.instance(instancePortRef, instance);
	InstancePortReference.port(instancePortRef, instancePort);
}

/**
 * Needed in the traversal of the port binding hierarchy, so traversal is made through the correct instances only.
 */
private pattern instPortRefToInstPortRef(superInstPortRef : InstancePortReference, instPortRef : InstancePortReference) {
	InstancePortReference.instance(superInstPortRef, _instance);
	InstancePortReference.port(superInstPortRef, superPort);
	PortBinding.compositeSystemPort(binding, superPort);
	PortBinding.instancePortReference(binding, instPortRef);
}

private pattern portToInstancePort(systemPort : Port, instance : ComponentInstance, port : Port) {
	PortBinding.compositeSystemPort(binding, systemPort);
	PortBinding.instancePortReference(binding, superInstancePortRef);
	find instPortRefToInstPortRef+(superInstancePortRef, instancePortRef);
	InstancePortReference.instance(instancePortRef, instance);
	InstancePortReference.port(instancePortRef, port);
} or {
	// Needed here?
	find portBindings(_, systemPort, instance, port);
}

/** 
 * It returns events of the parent interfaces as well.
 */
//pattern eventToEvent(gPort : Port, yEvent : types::Event, gEvent : gif::Event) {
//	find mappedPorts(interface, gPort, yEvent, gEvent);
//	Interface.events.event(interface, gEvent);
//} or {
//	find portToInstancePort(gPort, _, port);
//	find mappedPorts(interface, port, yEvent, gEvent);
//	Interface.events.event(interface, gEvent);	
//} or {
//	find mappedPorts(interface, gPort, yEvent, gEvent);
//	find parentInterfaces+(interface, parentInterface);
//	Interface.events.event(parentInterface, gEvent);
//} or {
//	find portToInstancePort(gPort, _, port);
//	find mappedPorts(interface, port, yEvent, gEvent);
//	find parentInterfaces+(interface, parentInterface);
//	Interface.events.event(parentInterface, gEvent);
//}

pattern interfaces(interface : Interface) {
	Interface(interface);
}

private pattern parentInterfaces(interface : Interface, parent : Interface) {
	Interface.parents(interface, parent);
}

private pattern eventsOfPorts(port : Port, event : gif::Event) {
	Port.interfaceRealization.interface(port, interface);
	Interface.events.event(interface, event);
} or {
	Port.interfaceRealization.interface(port, interface);
	find parentInterfaces+(interface, parentInterface);
	Interface.events.event(parentInterface, event);
}

// Constants
pattern constants(type : con::Type, name : java String, initExpression : con::Expression) {
	ConstantDeclaration.type(constantDeclaration, type);
	ConstantDeclaration.name(constantDeclaration, name);
	ConstantDeclaration.expression(constantDeclaration, initExpression);
}

// Synchronous component wrapper

pattern synchronousComponentWrappers(synchronousComponentWrapper : AsynchronousAdapter) {
	AsynchronousAdapter(synchronousComponentWrapper);
}

pattern queuesOfClocks(wrapper : AsynchronousAdapter, queue : MessageQueue, clock : Clock) {
	AsynchronousAdapter.messageQueues(wrapper, queue);
	find sourceOfEventPassings(queue, eventReference);
	ClockTickReference.clock(eventReference, clock);
}

pattern queuesOfEvents(queue : MessageQueue, port : Port, event : gif::Event) {
	find sourceOfEventPassings(queue, eventReference);
	PortEventReference.port(eventReference, port);
	find eventsOfPorts(port, event);
	PortEventReference.event(eventReference, event);
} or {
	find sourceOfEventPassings(queue, eventReference);
	AnyPortEventReference.port(eventReference, port);
	find eventsOfPorts(port, event);
}

pattern sourceOfEventPassings(queue : MessageQueue, sourceEventReference : EventReference) {
	MessageQueue.eventPassings(queue, eventPassing);
	EventPassing.source(eventPassing, sourceEventReference);
}

private pattern controlSpecifications(wrapper : AsynchronousAdapter, controlSpecification : ControlSpecification, trigger : SimpleTrigger, controlFunction : ControlFunction) {
	AsynchronousAdapter.controlSpecifications(wrapper, controlSpecification);
	ControlSpecification.trigger(controlSpecification, trigger);
	ControlSpecification.controlFunction(controlSpecification, controlFunction);
}

pattern anyTriggersOfWrappers(wrapper : AsynchronousAdapter, controlSpecification : ControlSpecification, controlFunction : ControlFunction) {
	find controlSpecifications(wrapper, controlSpecification, anyTrigger, controlFunction);
	AnyTrigger(anyTrigger);
}

pattern anyPortTriggersOfWrappers(wrapper : AsynchronousAdapter, controlSpecification : ControlSpecification, port : Port, controlFunction : ControlFunction) {
	find controlSpecifications(wrapper, controlSpecification, eventTrigger, controlFunction);
	EventTrigger.eventReference(eventTrigger, eventReference);
	AnyPortEventReference.port(eventReference, port);
}

pattern portEventTriggersOfWrappers(wrapper : AsynchronousAdapter, controlSpecification : ControlSpecification, port : Port, event : gif::Event, controlFunction : ControlFunction) {
	find controlSpecifications(wrapper, controlSpecification, eventTrigger, controlFunction);
	EventTrigger.eventReference(eventTrigger, eventReference);
	PortEventReference.port(eventReference, port);
	PortEventReference.event(eventReference, event);
}

pattern clockTriggersOfWrappers(wrapper : AsynchronousAdapter, controlSpecification : ControlSpecification, clock : Clock, controlFunction : ControlFunction) {
	find controlSpecifications(wrapper, controlSpecification, eventTrigger, controlFunction);
	EventTrigger.eventReference(eventTrigger, eventReference);
	ClockTickReference.clock(eventReference, clock);
}

// Asynchronous composite components

pattern asynchronousCompositeComponents(asynchronousCompositeComponent : AbstractAsynchronousCompositeComponent){
	AbstractAsynchronousCompositeComponent(asynchronousCompositeComponent);
}
